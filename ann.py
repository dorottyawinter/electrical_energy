# -*- coding: utf-8 -*-
"""ANN

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1osKl4lFl4zsQrt4UVP2oWIxGhUXJdE6s

# Artificial Neural Network

### Importing the libraries
"""

import numpy as np
import pandas as pd
import tensorflow as tf

tf.__version__

"""## Part 1 - Data Preprocessing

### Importing the dataset
"""

data = pd.read_excel('Folds5x2_pp.xlsx')

X = data.iloc[:, :-1].values
y = data.iloc[:, -1].values

"""### Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""## Part 2 - Building the ANN

### Initializing the ANN
"""

ann = tf.keras.models.Sequential()

"""### Adding the input layer and the first hidden layer"""

ann.add(tf.keras.layers.Dense(units=6, activation='relu'))

"""### Adding the second hidden layer"""

ann.add(tf.keras.layers.Dense(units=6, activation='relu'))

"""### Adding the output layer"""

ann.add(tf.keras.layers.Dense(units=1)) 
# regression: no activation function
# classification with 2 classes: sigmoid
# classification with more than 2 classes: softmax

"""## Part 3 - Training the ANN

### Compiling the ANN
"""

ann.compile(optimizer='adam', loss='mean_squared_error')
# 'adam' optimizer is the most popular optimizer when permorming SGD

"""### Training the ANN model on the Training set"""

ann.fit(x=X_train, y=y_train, batch_size=32, epochs=100)

"""### Predicting the results of the Test set"""

y_pred = ann.predict(x=X_test)

np.set_printoptions(precision=2)
np.concatenate(
    [y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1)], 
    axis=1
    )